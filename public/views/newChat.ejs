<div class="modal fade" id="newChatModal" tabindex="-1" role="dialog" aria-labelledby="newChatModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newChatModalLabel">New Chat</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="newChatForm" onsubmit="createChat('<%= data.user.id %>', event)" class="needs-validation" novalidate>
                    <div class="form-group">
                        <label for="name">Group Name</label>
                        <input type="text" class="form-control" id="name" name="name" placeholder="Enter group name" required>
                        <div class="valid-feedback">Looks good!</div>
                        <div class="invalid-feedback">Please provide a group name.</div>
                    </div>
                    <div class="form-group">
                        <div class="dropdown">
                            <button class="btn btn-primary dropdown-toggle"
                                    type="button"
                                    id="multiSelectDropdown"
                                    data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                Choose Participants
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="multiSelectDropdown" id="participantList"></ul>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="file" class="form-label">Group Photo</label>
                        <input type="file" class="form-control" id="file" name="file">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Create</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
  let users = [];
  let selectedUsers = [];
  const dropdownButton = document.getElementById('multiSelectDropdown');
  const participantList = document.getElementById('participantList');
  const dropdownMenu = document.querySelector('.dropdown-menu');

  fetch('/api/v1/users')
    .then(response => response.json())
    .then(data => {
      users = data.data.filter(user => user.id !== <%= data.user.id %>);
      users.forEach(user => {
        const listUser = document.createElement('li');
        listUser.innerHTML = `
                    <label>
                        <input type="checkbox" value="${user.id}">
                        ${user.fullname}
                    </label>
                `;
        participantList.appendChild(listUser);
      });
    })
    .catch(error => console.error('Error fetching users:', error));

  function handleCB(event) {
    const checkbox = event.target;
    if (checkbox.checked) {
      selectedUsers.push(+checkbox.value);
    } else {
      selectedUsers = selectedUsers.filter((item) => +item !== +checkbox.value);
    }

    const selectedUserNames = selectedUsers.map(userId => users.find(user => user.id === userId).fullname);

    dropdownButton.innerText = selectedUserNames.length > 0
      ? selectedUserNames.join(', ') : 'Select Items';
  }

  dropdownMenu.addEventListener('change', handleCB);

  async function createChat(userId, event) {
    event.preventDefault();

    const form = document.getElementById('newChatForm');

    if (form.checkValidity() === false) {
      event.stopPropagation();
      form.classList.add('was-validated');
      return;
    }

    const formData = new FormData(form);

    formData.append('creatorId', userId);

    formData.append('participants', JSON.stringify(selectedUsers));

    try {
      const response = await fetch('/api/v1/chatroom', {
        method: 'POST',
        body: formData
      });
      if (!response.ok) {
        throw new Error('Failed to create chatroom');
      }
      location.reload();
    } catch (error) {
      console.error('Error creating chatroom:', error);
    }
  }
</script>
